<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[客户端与分布式系统连接(以kafka集群为例)]]></title>
      <url>%2F2017%2F03%2F03%2Fconnect-to-kafka%2F</url>
      <content type="text"><![CDATA[本文以kafka cluster为例讲解客户端如何连接到分布式系统。 客户端连接分布式系统的方式和传统的方式不同,一般不会直接连接端口,而是通过连接到zookeeper,再从zookeeper中获取连接地址,下面我们以kafka cluster为例讲解一下 原料 zookeeper 集群 搭建方式见 &lt;使用docker创建zookeeper集群&gt; kafka 集群 搭建方式见 &lt;使用docker创建kafka集群&gt; scala 我恨java,能不用绝对不用(￣‐￣)んー ##kafka节点信息在zookeeper中的存储结构 zookeeper中的每个节点(broker)的信息存在zookeeper中,可以通过命令行查看12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849➜ docker zkCli -server 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813Connecting to 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813Welcome to ZooKeeper!JLine support is enabledWATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813(CONNECTED) 0] ls /brokers/ids[1015, 1014, 1013][zk: 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813(CONNECTED) 1] get /brokers/ids/1015&#123;"jmx_port":-1,"timestamp":"1488523027648","endpoints":["PLAINTEXT://53a4d26884e0:9092"],"host":"53a4d26884e0","version":3,"port":9092&#125;cZxid = 0x90000035actime = Fri Mar 03 14:37:07 CST 2017mZxid = 0x90000035amtime = Fri Mar 03 14:37:07 CST 2017pZxid = 0x90000035acversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x15a8ddd034f0025dataLength = 135numChildren = 0[zk: 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813(CONNECTED) 2] get /brokers/ids/1014&#123;"jmx_port":-1,"timestamp":"1488523027875","endpoints":["PLAINTEXT://6a1c02a03222:9092"],"host":"6a1c02a03222","version":3,"port":9092&#125;cZxid = 0x900000361ctime = Fri Mar 03 14:37:07 CST 2017mZxid = 0x900000361mtime = Fri Mar 03 14:37:07 CST 2017pZxid = 0x900000361cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x15a8ddd034f0024dataLength = 135numChildren = 0[zk: 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813(CONNECTED) 3] get /brokers/ids/1013&#123;"jmx_port":-1,"timestamp":"1488523027981","endpoints":["PLAINTEXT://bc7648a682f2:9092"],"host":"bc7648a682f2","version":3,"port":9092&#125;cZxid = 0x900000366ctime = Fri Mar 03 14:37:07 CST 2017mZxid = 0x900000366mtime = Fri Mar 03 14:37:07 CST 2017pZxid = 0x900000366cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x25a8ddd0343001cdataLength = 135numChildren = 0 解释下节点信息1&#123;"jmx_port":-1,"timestamp":"1488523027648","endpoints":["PLAINTEXT://53a4d26884e0:9092"],"host":"53a4d26884e0","version":3,"port":9092&#125; 字段 说明 jmx_port timestamp endpoints host port]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用docker创建kafka集群]]></title>
      <url>%2F2017%2F03%2F02%2Fdocker-kafka-cluster%2F</url>
      <content type="text"><![CDATA[如何使用docker创建一个包含三个节点的kafka集群(非伪分布式),并提供web管理界面。 近期在项目上使用阿里datahub做存储用户行为并且做流式计算,阿里大数据套件十分好用基本上可以满足项目需要,研究下kafka作为技术储备。 原料 Docker version 1.13.0 docker-compose version 1.10.0 wurstmeister/kafka 镜像 sheepkiller/kafka-manager 镜像 kafka-manager是雅虎推出的kafka管理器偏重于集群与topic管理 zookeeper 集群 搭建方式见&lt;使用docker创建zookeeper集群&gt; 步骤编辑kafka.yml配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748version: '2'services: kafka1: image: wurstmeister/kafka container_name: kafka1 ports: - "9092" expose: - "9092" environment: KAFKA_ADVERTISED_PORT: 9092 KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181 volumes: - "./storge/kafka1:/opt/kafka/data:rw" kafka2: image: wurstmeister/kafka container_name: kafka2 ports: - "9092" expose: - "9092" environment: KAFKA_ADVERTISED_PORT: 9092 KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181 volumes: - "./storge/kafka2:/opt/kafka/data:rw" kafka3: image: wurstmeister/kafka container_name: kafka3 ports: - "9092" expose: - "9092" environment: KAFKA_ADVERTISED_PORT: 9092 KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181 volumes: - "./storge/kafka3:/opt/kafka/data:rw" kafka-manager: image: sheepkiller/kafka-manager container_name: kafka-manager ports: - "9000:9000" expose: - "9000" environment: APPLICATION_SECRET: letmein ZK_HOSTS: zoo1:2181,zoo2:2181,zoo3:2181 运行服务123456789101112➜ docker docker-compose -f kafka.yml up -dkafka-manager is up-to-datekafka1 is up-to-datekafka2 is up-to-datekafka3 is up-to-date➜ docker docker-compose -f kafka.yml ps Name Command State Ports--------------------------------------------------------------------------kafka-manager ./start-kafka-manager.sh Up 0.0.0.0:9000-&gt;9000/tcpkafka1 start-kafka.sh Up 0.0.0.0:32813-&gt;9092/tcpkafka2 start-kafka.sh Up 0.0.0.0:32814-&gt;9092/tcpkafka3 start-kafka.sh Up 0.0.0.0:32815-&gt;9092/tcp 使用方式kafka-manger web界面 地址：http://127.0.0.1:9000 说明 集群包含三个kafka节点:kafka1,kafka2,kafka3,分别监听docker端口为2181 kafka集群依赖zookeeper集群(zoo1,zoo2,zoo3) zookeeper kafka-manager监听在本地9000端口,通过http://127.0.0.1:9000访问 如何使用客户端连接到kafka集群见我的另外一篇博客]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用docker创建zookeeper集群]]></title>
      <url>%2F2017%2F03%2F01%2Fdocker-zookeeper-cluster%2F</url>
      <content type="text"><![CDATA[使用docker创建一个包含三个节点的zookeeper集群,并提供web管理界面。 过去几年接触过的分布式系统大多使用zookeeper作为分布式程序协调服务。去年做solrCloud就有用到,当时是使用单机模式与伪分布式模式,。最近研究kafka也要用到zookeerper,于是在本地使用docker与docker-compose搭建了一个分布式zookeerper集群,附带一个node-zk-browser管理器,以后本地测试与验证终于可以在集群环境下进行了。 原料 Docker version 1.13.0 docker-compose version 1.10.0 fify/node-zk-browser:latest 镜像 zookeeper:latest 镜像 步骤编辑zookeeper.yml配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172version: '2'networks: zookeeper_network: driver: bridgeservices: zoo1: image: zookeeper:latest container_name: zoo1 ports: - "21811:2181" expose: - "2888" - "3888" networks: - "zookeeper_network" volumes: - "./storge/zoo1/data:/data:rw" - "./storge/zoo1/datalog:/datalog:rw" - "./storge/zoo1/conf:/conf:rw" environment: ZOO_MY_ID: 1 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zoo2: image: zookeeper:latest container_name: zoo2 ports: - "21812:2181" networks: - "zookeeper_network" expose: - "2888" - "3888" volumes: - "./storge/zoo2/data:/data:rw" - "./storge/zoo2/datalog:/datalog:rw" - "./storge/zoo2/conf:/conf:rw" environment: ZOO_MY_ID: 2 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zoo3: image: zookeeper:latest container_name: zoo3 ports: - "21813:2181" networks: - "zookeeper_network" expose: - "2888" - "3888" volumes: - "./storge/zoo3/data:/data:rw" - "./storge/zoo3/datalog:/datalog:rw" - "./storge/zoo3/conf:/conf:rw" environment: ZOO_MY_ID: 3 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zk-manager: image: fify/node-zk-browser:latest container_name: zk-manager restart: always depends_on: - zoo1 - zoo2 - zoo3 ports: - "3000:3000" networks: - "zookeeper_network" expose: - "3000" environment: ZK_HOST: zoo1:2181,zoo2:2181,zoo3:2181 运行服务123456789101112➜ docker docker-compose -f zookeeper.yml up --remove -dStarting zoo3Starting zoo2Starting zoo1Starting zk-manager➜ docker docker-compose -f zookeeper.yml ps Name Command State Ports-------------------------------------------------------------------------------------------------zk-manager /opt/node-zk-browser/start.sh Up 0.0.0.0:3000-&gt;3000/tcpzoo1 /docker-entrypoint.sh zkSe ... Up 0.0.0.0:21811-&gt;2181/tcp, 2888/tcp, 3888/tcpzoo2 /docker-entrypoint.sh zkSe ... Up 0.0.0.0:21812-&gt;2181/tcp, 2888/tcp, 3888/tcpzoo3 /docker-entrypoint.sh zkSe ... Up 0.0.0.0:21813-&gt;2181/tcp, 2888/tcp, 3888/tcp 使用方式通过zkCli访问: 123456789➜ docker zkCli -server 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813Connecting to 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813Welcome to ZooKeeper!JLine support is enabledWATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: 127.0.0.1:21811,127.0.0.1:21812,127.0.0.1:21813(CONNECTED) 0] node-zk-browser web界面 地址：http://127.0.0.1:3000 说明 集群包含三个zookeeper节点:zoo1,zoo2,zoo3,分别监听本地21811,21812,21813三个端口,docker端口为2181 各个zookeeper节点数据存储在本地./storge/zoo1,zoo2,zoo3。 zookeeper节点通过docker端口2888,3888进行通讯,2888为选举端口,3888为备选端口 node-zk-browser通过docker端口2181访问各个zookeeper节点,本地监听3000端口 遗留问题 node-zk-browser界面丑出天际有没有(ノ ﾟДﾟ)ノ ＝＝＝＝ ┻━━┻?谁有更好的选择推荐一下。 目前无法使用docker-compose scale动态扩展zookeeper节点,因为ZOO_MY_ID和ZOO_SERVERS选项需要在配置文件中制定,但这一方面并不是很重要,一般情况下并不需要扩展节点。]]></content>
    </entry>

    
  
  
</search>
